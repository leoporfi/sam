{
  "projectMetadata": {
    "projectName": "SAM - Servicio Web de Gestión y Orquestación RPA",
    "documentVersion": "1.5",
    "description": "Especificaciones técnicas completas para el desarrollo del servicio web de gestión de SAM. Este documento detalla la arquitectura, modelo de datos, funcionalidades, reglas de negocio y APIs necesarias para el proyecto. Está diseñado para ser interpretado tanto por desarrolladores humanos como por asistentes de IA.",
    "projectOwner": "Administrador RPA",
    "techStack": {
      "backend": "FastAPI",
      "frontend": "Reactpy",
      "database": "SQL Server"
    }
  },
  "businessRules": [
    {
      "ruleId": "BR-01",
      "description": "No es posible programar un robot que es 'Online'",
      "implementation": "En la UI, el selector de robots para crear una programación debe deshabilitar o filtrar aquellos donde `Robot.EsOnline = 1`. En el backend, la API de creación de schedules debe retornar un error 409 (Conflict) si se intenta programar un robot con `EsOnline = 1`."
    },
    {
      "ruleId": "BR-02",
      "description": "La asignación de un equipo a un robot programado debe marcar el robot como 'No Online' y 'Programado'",
      "implementation": "Al guardar una programación que asigna un equipo a un robot, la lógica de negocio debe ejecutar las siguientes actualizaciones en la BD: `UPDATE Robot SET EsOnline = 0, EsProgramado = 1 WHERE IdRobot = ?` y `UPDATE Equipo SET EsProgramado = 1 WHERE IdEquipo IN (...)`. Esto lo aísla de la gestión del Balanceador."
    },
    {
      "ruleId": "BR-03",
      "description": "La asignación manual de equipos debe marcar el equipo como 'Reservado'",
      "implementation": "Cuando un usuario asigna un equipo a un robot desde la interfaz web, la API debe marcar ese equipo con `Reservado = 1`. Esto lo diferencia de las asignaciones dinámicas del Balanceador (`Reservado = 0`)."
    },
    {
      "ruleId": "BR-04",
      "description": "Solicitar confirmación antes de acciones destructivas",
      "implementation": "La interfaz de usuario debe mostrar un modal de confirmación ('¿Está seguro?') antes de ejecutar las siguientes acciones: Desasignar un equipo, Eliminar un Pool, Modificar la asignación de recursos de un Pool, Eliminar una Programación."
    },
    {
      "ruleId": "BR-05",
      "description": "Filtrado de equipos disponibles por tipo de licencia en modal de asignación",
      "implementation": "En el modal de asignación de equipos, solo deben mostrarse equipos que tengan el campo `Licencia` con valores 'ATTENDEDRUNTIME' o 'RUNTIME'. Implementación SQL: `WHERE Licencia IN ('ATTENDEDRUNTIME', 'RUNTIME')`"
    },
    {
      "ruleId": "BR-06",
      "description": "Exclusión de equipos ya asignados en modal de asignación",
      "implementation": "Un equipo no puede mostrarse como disponible si existe en la tabla `Asignaciones`. Un equipo debe ser desasignado explícitamente de su robot actual antes de poder asignarse a otro robot. Implementación SQL: `WHERE EquipoId NOT IN (SELECT EquipoId FROM Asignaciones WHERE EquipoId IS NOT NULL)`"
    },
    {
      "ruleId": "BR-07",
      "description": "Sincronización selectiva de equipos según tipo de licencia del usuario",
      "implementation": "Durante la sincronización con AA360, solo se deben obtener y sincronizar en la tabla Equipos aquellos dispositivos cuyos usuarios tengan licencia 'ATTENDEDRUNTIME' o 'RUNTIME'. El proceso de sincronización debe: 1) Obtener usuarios de AA360, 2) Filtrar usuarios con `licenseFeatures` que contengan 'ATTENDEDRUNTIME' o 'RUNTIME', 3) Obtener devices de AA360, 4) Cruzar devices con usuarios filtrados por `UserId`, 5) Insertar/actualizar solo los equipos que cumplan esta condición. Esta regla se implementa en `sincronizador_comun.py` en el método `_procesar_y_mapear_equipos`."
    },
    {
      "ruleId": "BR-08",
      "description": "Sincronización selectiva de usuarios según tipo de licencia",
      "implementation": "En la tabla Equipos solo se deben almacenar usuarios que tengan licencia 'ATTENDEDRUNTIME' o 'RUNTIME'. Si un usuario tiene múltiples licencias, solo se sincroniza si al menos una de ellas es 'ATTENDEDRUNTIME' o 'RUNTIME'. Esta validación se realiza verificando que el array `licenseFeatures` del usuario contenga al menos uno de estos valores. Implementación en Python: `any(lic in user.get('licenseFeatures', []) for lic in ['ATTENDEDRUNTIME', 'RUNTIME'])`"
    }
  ],
  "implementationNotes": [
    {
      "area": "Sincronización con AA360",
      "note": "La implementación actual en `sincronizador_comun.py` ya obtiene usuarios detallados con `licenseFeatures`. Se debe agregar lógica de filtrado en `_procesar_y_mapear_equipos` para aplicar BR-07 y BR-08.",
      "affected_files": [
        "sincronizador_comun.py",
        "a360_client.py"
      ]
    },
    {
      "area": "API de Asignación de Equipos",
      "note": "El endpoint PUT /api/robots/{robot_id}/asignaciones debe consultar equipos disponibles aplicando BR-05 y BR-06 antes de devolver la lista al frontend.",
      "affected_endpoints": [
        "GET /api/equipos/disponibles",
        "PUT /api/robots/{robot_id}/asignaciones"
      ]
    }
  ]
}